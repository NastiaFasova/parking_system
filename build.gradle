plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.4'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

group = 'demo'
version = '0.0.1-SNAPSHOT'
description = 'ParkingSystem'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    mockitoAgent
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
//    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'

    implementation "org.mapstruct:mapstruct:1.6.3"
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

    runtimeOnly 'com.h2database:h2'
    testImplementation 'com.h2database:h2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.3'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    implementation 'org.apache.commons:commons-lang3:3.17.0'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.assertj:assertj-core'

    testImplementation(libs.mockito)
    mockitoAgent(libs.mockito) {
        transitive = false
    }
}

tasks {
    test {
        useJUnitPlatform()
        outputs.dir snippetsDir
        jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"

        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
            showCauses true
            showExceptions true
            showStackTraces true
        }

        afterSuite { desc, result ->
            if (!desc.parent) {
                logger.lifecycle("Test result: ${result.resultType}")
                logger.lifecycle("Test summary: ${result.testCount} tests, " +
                        "${result.successfulTestCount} succeeded, " +
                        "${result.failedTestCount} failed, " +
                        "${result.skippedTestCount} skipped")
            }
        }
    }
}

tasks.named('asciidoctor') {
    inputs.dir snippetsDir
    dependsOn test
}
